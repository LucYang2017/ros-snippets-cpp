{
	// Escaping the $ character in snippets
	// https://stackoverflow.com/questions/3215705/escaping-the-character-in-snippets

	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ros::init": {
		"prefix": "ros::init",
		"body": "ros::init(argc, argv, \"${1:/*node_name*/}\");\n",
		"description": "ros::init()"
	},
	"ros::Publisher": {
		"prefix": "ros::pub",
		"body": "ros::Publisher ${1:pub} = ${2:n}.advertise<${3:std_msgs::String}>(\"${4:topic_name}\", ${5:1000});\n",
		"description": "ros::Publisher"
	},
	"ros::Subscriber": {
		"prefix": "ros::sub",
		"body": "ros::Subscriber ${1:sub} = ${2:n}.subscribe(\"${3:topic_name}\", ${4:1000}, ${5:subCallback});\n",
		"description": "ros::Subscriber"
	},
	"ros while": {
		"prefix": "roswhile",
		"body": "ros::Rate loop_rate(${1:10});\nwhile (ros::ok())\n{\n\t${2:/* code for loop body */}$0\n\n\tros::spinOnce();\n\tloop_rate.sleep();\n}\n",
		"description": "ros::Rate â€¦ while"
	},
	"ros error": {
		"scope": "cpp",
		"prefix": "roserr",
		"body": "ROS_ERROR_STREAM(${1});\n$0",
		"description": "ros error"
	},
	"ros info": {
		"scope": "cpp",
		"prefix": "rosinfo",
		"body": "ROS_INFO_STREAM(${1});\n$0",
		"description": "ros info"
	},
	"ros debug": {
		"scope": "cpp",
		"prefix": "rosdbg",
		"body": "ROS_DEBUG_STREAM(${1});\n$0",

		"description": "ros debug"
	},
	"ros info var": {
		"scope": "cpp",
		"prefix": "rosinfovar",
		"body": "ROS_INFO_STREAM(\"${1:} = \" << ${2:$1});\n$0",
	},
	"ros debug var": {
		"scope": "cpp",
		"prefix": "rosdbgvar",
		"body": "ROS_DEBUG_STREAM(\"${1:} = \" << ${2:$1});\n$0",
	},
	"ros assert": {
		"scope": "cpp",
		"prefix": "rosass",
		"body": "ROS_ASSERT(${1:});\n$0",
	},
	"ros get param": {
		"scope": "cpp",
		"prefix": "rosparam_get",
		"body": "if (!n.getParam(\"$1\", ${1:name}))\n\t{ ROS_ERROR(\"No $1 param\"); }\n$0",
	},
	"add executable": {
		"scope": "cmake",
		"prefix": "add_executalbe",
		"body": [
			"add_executable(${1:/*node_file_name*/} src/${1:/*node_file_name*/}.cpp)",
			"add_dependencies(${1:/*node_file_name*/} \${\${PROJECT_NAME}_EXPORTED_TARGETS} \${catkin_EXPORTED_TARGETS})",
			"target_link_libraries(${1:/*node_file_name*/} \${catkin_LIBRARIES})",
			"$0"
		]
	}
}
